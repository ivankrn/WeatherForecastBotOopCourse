package ru.urfu.weatherforecastbot.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import ru.urfu.weatherforecastbot.bot.BotMessage;
import ru.urfu.weatherforecastbot.bot.WeatherForecastBot;
import ru.urfu.weatherforecastbot.database.ReminderRepository;
import ru.urfu.weatherforecastbot.model.Place;
import ru.urfu.weatherforecastbot.model.Reminder;
import ru.urfu.weatherforecastbot.model.WeatherForecast;
import ru.urfu.weatherforecastbot.util.WeatherForecastFormatter;
import ru.urfu.weatherforecastbot.util.WeatherForecastFormatterImpl;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

/**
 * –¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
 */
@ExtendWith(MockitoExtension.class)
class ReminderServiceImplTest {

    /**
     * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã
     */
    private final WeatherForecastService weatherService = Mockito.mock();
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã
     */
    private final WeatherForecastFormatter forecastFormatter = new WeatherForecastFormatterImpl();
    /**
     * –ë–æ—Ç
     */
    @Mock
    private WeatherForecastBot bot;
    /**
     * –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
     */
    private ReminderRepository reminderRepository;
    /**
     * ScheduledExecutorService –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
     */
    private FakeScheduledExecutorService executorService;
    /**
     * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
     */
    private ReminderService reminderService;

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
     */
    @BeforeEach()
    void setUp() {
        reminderRepository = Mockito.mock();
        executorService = new FakeScheduledExecutorService();
        reminderService = new ReminderServiceImpl(bot, weatherService, forecastFormatter,
                reminderRepository, executorService);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.<br>
     * –ü—Ä–æ–≤–µ—Ä–∫–∏:
     * <ul>
     *     <li>–µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–¥—Ç–∏ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å</li>
     *     <li>–µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å</li>
     *     <li>–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ</li>
     *     <li>–ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –Ω–µ —á–∞—â–µ –∏ –Ω–µ —Ä–µ–∂–µ</li>
     * </ul>
     */
    @Test
    @DisplayName("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")
    void testAddReminder() {
        long chatId = 1L;
        LocalTime now = LocalTime.now(ZoneOffset.UTC);
        int deltaInMinutes = 10;
        Reminder ekateringburgReminder = new Reminder();
        ekateringburgReminder.setId(1L);
        ekateringburgReminder.setChatId(chatId);
        ekateringburgReminder.setPlaceName("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥");
        ekateringburgReminder.setTime(now.plusMinutes(deltaInMinutes));
        Reminder nizhnyNovgorodReminder = new Reminder();
        nizhnyNovgorodReminder.setId(2L);
        nizhnyNovgorodReminder.setChatId(chatId);
        nizhnyNovgorodReminder.setPlaceName("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥");
        nizhnyNovgorodReminder.setTime(now.minusMinutes(deltaInMinutes));
        when(reminderRepository.save(any(Reminder.class))).thenReturn(ekateringburgReminder, nizhnyNovgorodReminder);
        LocalDateTime today = LocalDateTime.now();
        int hours = 24;
        List<WeatherForecast> ekateringburgForecast = new ArrayList<>(hours);
        List<WeatherForecast> nizhnyNovgorodForecast = new ArrayList<>(hours);
        Place ekateringburg =
                new Place("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", 56.875, 60.625, "Asia/Yekaterinburg");
        Place nizhnyNovgorod =
                new Place("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", 56.328, 44.002, "Europe/Moscow");
        for (int hour = 0; hour < hours; hour++) {
            ekateringburgForecast.add(
                    new WeatherForecast(
                            ekateringburg, today.withHour(hour).withMinute(0), 0, 0));
            nizhnyNovgorodForecast.add(
                    new WeatherForecast(
                            nizhnyNovgorod, today.withHour(hour).withMinute(0), 10, 5));
        }
        when(weatherService.getForecast("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", 1)).thenReturn(ekateringburgForecast);
        when(weatherService.getForecast("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", 1)).thenReturn(nizhnyNovgorodForecast);
        String expectedEkateringburgForecast = """
                üå°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥):
                                
                00-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                01-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                02-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                03-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                04-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                05-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                06-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                07-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                08-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                09-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                10-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                11-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                12-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                13-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                14-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                15-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                16-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                17-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                18-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                19-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                20-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                21-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                22-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)
                23-00: 0.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 0.0¬∞C)""";
        String expectedNizhnyNovgorodForecast = """
                üå°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥):
                                
                00-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                01-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                02-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                03-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                04-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                05-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                06-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                07-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                08-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                09-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                10-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                11-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                12-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                13-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                14-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                15-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                16-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                17-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                18-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                19-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                20-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                21-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                22-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)
                23-00: 10.0¬∞C (–ø–æ –æ—â—É—â–µ–Ω–∏—é 5.0¬∞C)""";

        reminderService.addReminder(
                chatId,
                "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                now
                        .plusMinutes(deltaInMinutes)
                        .format(DateTimeFormatter.ISO_LOCAL_TIME));
        reminderService.addReminder(
                chatId,
                "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
                now
                        .minusMinutes(deltaInMinutes)
                        .format(DateTimeFormatter.ISO_LOCAL_TIME));

        verify(bot, never()).sendMessage(eq(chatId), argThat((BotMessage message) ->
                message.getText().equals(expectedEkateringburgForecast)
                        || message.getText().equals(expectedNizhnyNovgorodForecast)));

        executorService.elapse(deltaInMinutes, TimeUnit.MINUTES);
        verify(bot).sendMessage(eq(chatId), argThat((BotMessage message) ->
                message.getText().equals(expectedEkateringburgForecast)));
        verify(bot, never()).sendMessage(eq(chatId), argThat((BotMessage message) ->
                message.getText().equals(expectedNizhnyNovgorodForecast)));

        executorService.elapse(1, TimeUnit.DAYS);
        verify(bot, times(2)).sendMessage(eq(chatId), argThat((BotMessage message) ->
                message.getText().equals(expectedEkateringburgForecast)));
        verify(bot).sendMessage(eq(chatId), argThat((BotMessage message) ->
                message.getText().equals(expectedNizhnyNovgorodForecast)));

        Exception exception = assertThrows(DateTimeParseException.class,
                () -> reminderService.addReminder(chatId, "–ü—Ä–∞–≥–∞", "abc"));
        assertEquals("Text 'abc' could not be parsed at index 0", exception.getMessage());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.<br>
     * –ü—Ä–æ–≤–µ—Ä–∫–∏:
     * <ul>
     *     <li>–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ—Ä—Ä–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–æ
     *     –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è</li>
     *     <li>–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ</li>
     * </ul>
     */
    @Test
    @DisplayName("–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    void testDeleteReminder() {
        long chatId = 1L;
        String placeName = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥";
        LocalTime now = LocalTime.now(ZoneOffset.UTC);
        int deltaInMinutes = 10;
        long reminderId = 1L;
        Reminder reminder = new Reminder();
        reminder.setId(reminderId);
        reminder.setChatId(chatId);
        reminder.setPlaceName(placeName);
        reminder.setTime(now.minusMinutes(deltaInMinutes));
        when(reminderRepository.save(any(Reminder.class))).thenReturn(reminder);
        when(reminderRepository.findAllByChatId(chatId)).thenReturn(List.of(reminder));
        reminderService.addReminder(
                chatId,
                placeName,
                now
                        .minusMinutes(deltaInMinutes)
                        .format(DateTimeFormatter.ISO_LOCAL_TIME));

        reminderService.deleteReminderByRelativePosition(chatId, 1);
        verify(reminderRepository).deleteById(reminderId);
        executorService.elapse(deltaInMinutes, TimeUnit.MINUTES);
        verify(bot, never()).sendMessage(eq(chatId), any());

        executorService.elapse(1, TimeUnit.DAYS);
        verify(bot, never()).sendMessage(eq(chatId), any());

        Exception exception = assertThrows(IllegalArgumentException.class, () ->
                reminderService.deleteReminderByRelativePosition(chatId, -1));
        assertEquals("Wrong reminder position provided!", exception.getMessage());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.<br>
     * –ü—Ä–æ–≤–µ—Ä–∫–∏:
     * <ul>
     *     <li>–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è,
     *     —Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ.</li>
     * </ul>
     */
    @Test
    @DisplayName("–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    void testEditReminder() {
        long chatId = 1L;
        Reminder reminder = new Reminder();
        reminder.setId(1L);
        reminder.setChatId(chatId);
        reminder.setPlaceName("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥");
        reminder.setTime(LocalTime.of(5, 0));
        when(reminderRepository.findAllByChatId(chatId)).thenReturn(List.of(reminder));
        when(reminderRepository.save(any())).thenReturn(reminder);
        reminderService.addReminder(chatId, "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "05:00");

        reminderService.editReminderByRelativePosition(chatId, 1, "–ú–æ—Å–∫–≤–∞", "10:00");

        assertEquals(chatId, reminder.getChatId());
        assertEquals("–ú–æ—Å–∫–≤–∞", reminder.getPlaceName());
        assertEquals(LocalTime.of(10, 0), reminder.getTime());
    }
}